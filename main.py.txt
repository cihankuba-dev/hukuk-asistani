import os
import io
import tempfile
import faiss
import pickle
from fastapi import FastAPI, UploadFile, Form
from fastapi.middleware.cors import CORSMiddleware
from openai import OpenAI
from PyPDF2 import PdfReader
import docx
import openpyxl
import textract

# OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# FAISS index (hafıza için)
INDEX_FILE = "faiss_index.pkl"
dimension = 1536
if os.path.exists(INDEX_FILE):
    with open(INDEX_FILE, "rb") as f:
        index, metadata = pickle.load(f)
else:
    index = faiss.IndexFlatL2(dimension)
    metadata = []

# FastAPI
app = FastAPI(title="⚖️ Hukuk Asistanı")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# 🔹 Yardımcı Fonksiyon: Dosya Metni Çıkarma
def extract_text(file: UploadFile):
    ext = file.filename.split(".")[-1].lower()
    content = b"".join(file.file.readlines())
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{ext}") as tmp:
        tmp.write(content)
        tmp_path = tmp.name

    text = ""
    try:
        if ext == "pdf":
            reader = PdfReader(tmp_path)
            text = "\n".join([page.extract_text() or "" for page in reader.pages])
        elif ext in ["docx"]:
            doc = docx.Document(tmp_path)
            text = "\n".join([p.text for p in doc.paragraphs])
        elif ext in ["xlsx"]:
            wb = openpyxl.load_workbook(tmp_path)
            for sheet in wb.sheetnames:
                ws = wb[sheet]
                for row in ws.iter_rows(values_only=True):
                    text += " ".join([str(cell) for cell in row if cell]) + "\n"
        else:
            text = textract.process(tmp_path).decode("utf-8")
    finally:
        os.remove(tmp_path)
    return text.strip()

# 🔹 OpenAI Embedding
def embed_text(text):
    response = client.embeddings.create(
        model="text-embedding-3-small",
        input=text
    )
    return response.data[0].embedding

# 🔹 Ingest endpoint
@app.post("/ingest")
async def ingest(file: UploadFile):
    global index, metadata
    text = extract_text(file)

    chunks = [text[i:i+1000] for i in range(0, len(text), 1000)]
    for chunk in chunks:
        vector = embed_text(chunk)
        index.add([vector])
        metadata.append({"text": chunk, "file": file.filename})

    with open(INDEX_FILE, "wb") as f:
        pickle.dump((index, metadata), f)

    return {
        "status": "ok",
        "files_ingested": 1,
        "chunks_total": len(metadata),
        "last_added_chunks": len(chunks)
    }

# 🔹 Dilekçe hazırlama
@app.post("/petition")
async def petition(prompt: str = Form(...)):
    messages = [
        {"role": "system", "content": "Sen deneyimli bir Türk hukuk asistanısın. Her çıktının sonuna 'Av. Mehmet Cihan KUBA' imzasını ekle."},
        {"role": "user", "content": prompt}
    ]
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    draft = response.choices[0].message.content
    return {"draft": draft}

# 🔹 Belge özetleme
@app.post("/summarize")
async def summarize(file: UploadFile):
    text = extract_text(file)
    messages = [
        {"role": "system", "content": "Sen deneyimli bir hukuk asistanısın. Belgeleri analiz edip özet çıkar."},
        {"role": "user", "content": f"Şu belgeyi özetle: {text[:4000]}"}
    ]
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    summary = response.choices[0].message.content
    return {"summary": summary}

# 🔹 Arşivden dilekçe taslağı (RAG)
@app.post("/draft_from_file")
async def draft_from_file(file: UploadFile):
    text = extract_text(file)
    vector = embed_text(text)
    D, I = index.search([vector], k=5)
    context = "\n".join([metadata[i]["text"] for i in I[0] if i < len(metadata)])

    messages = [
        {"role": "system", "content": "Sen deneyimli bir hukuk asistanısın. Her çıktının sonuna 'Av. Mehmet Cihan KUBA' imzasını ekle."},
        {"role": "user", "content": f"Şu dosya metnine ve geçmiş arşivime göre dilekçe hazırla:\n\n{context}\n\nDosya: {text[:2000]}"}
    ]
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    draft = response.choices[0].message.content
    return {"draft": draft}

# 🔹 Mevzuat & içtihat arama (dummy versiyon — geliştirilir)
@app.post("/law_search")
async def law_search(query: str = Form(...)):
    messages = [
        {"role": "system", "content": "Sen deneyimli bir hukuk araştırma asistanısın. Güncel mevzuat ve içtihatlardan alıntılarla özet ver."},
        {"role": "user", "content": f"{query} hakkında mevzuat ve içtihat ara."}
    ]
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages
    )
    result = response.choices[0].message.content
    return {"result": result}